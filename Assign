Assignment 3
Author: Krishna Mani Rao Ram
Student ID: 2*******5

Description:
    Various Python programming exercises including functions,
    list comprehensions, collision detection, scoring, plotting, and area calculations.

README:
- Ensure required packages (`numpy`, `matplotlib`, `sympy`, `scipy`) are installed.
- Run using: python sit742_223067545.py
- Outputs include function results and a plot with area calculation.
"""

# Part 1: Basic Functions & Exercises

def is_divisible(a: int, b: int) -> bool:
    return a % b == 0


def not_equal(a, b) -> bool:
    return a != b


def find_digits(word: str) -> list:
    return [char for char in word if char.isdigit()]


def collisions(ball1: tuple, ball2: tuple) -> bool:
    x1, y1, r1 = ball1
    x2, y2, r2 = ball2
    return (x1 - x2)**2 + (y1 - y2)**2 <= (r1 + r2)**2


def get_word_score(word: str) -> int:
    word = word.lower()
    letter_values = {'a': 1, 'b': 1, 'c': 5, 'd': 6, 'e': 1, 'f': 4, 'g': 2, 'h': 4,
                     'i': 1, 'j': 8, 'k': 6, 'l': 1, 'm': 4, 'n': 1, 'o': 1, 'p': 3,
                     'q': 11, 'r': 1, 's': 1, 't': 1, 'u': 1, 'v': 5, 'w': 4, 'x': 8,
                     'y': 6, 'z': 10, ' ': 100}
    score = sum(letter_values.get(c, 0) for c in word)
    length_bonus = max(1, 7 * len(word) - 3 * (20 - len(word)))
    return score * length_bonus


def sum_digits(n: int) -> int:
    return sum(int(d) for d in str(n))


def check_studentid(studentid: int):
    x = sum_digits(studentid)
    if x % 2 == 0:
        print('version I')
    else:
        print('version II')


# Part 2: Plotting & Area Calculation

import numpy as np
import matplotlib.pyplot as plt
import sympy as sp
from scipy.integrate import quad

def curve(x):
    return 5 + 4*x - x**2


def line(x):
    return 10 - 2*x


if __name__ == "__main__":
    print("is_divisible(10, 2):", is_divisible(10, 2))
    print("not_equal(10, 20):", not_equal(10, 20))
    print("find_digits('Roshan1198'):", find_digits('Roshan1198'))
    print("collisions((0, 0, 1), (1, 0, 1)):", collisions((0, 0, 1), (1, 0, 1)))
    print("get_word_score('Australia'):", get_word_score('Australia'))
    check_studentid(223067545)

    x = sp.symbols('x')
    intersection_points = sp.solve(curve(x) - line(x), x)
    a, b = sorted([float(pt) for pt in intersection_points])

    x_vals = np.linspace(a-1, b+1, 400)
    y_curve = curve(x_vals)
    y_line = line(x_vals)

    plt.figure(figsize=(8, 6))
    plt.plot(x_vals, y_curve, label='y = 5+4x-xÂ²')
    plt.plot(x_vals, y_line, label='y = 10-2x')
    plt.fill_between(x_vals, y_curve, y_line, where=((x_vals >= a) & (x_vals <= b)), color='gray', alpha=0.5)
    plt.xlabel('x')
    plt.ylabel('y')
    plt.title('Area Between Curve and Line')
    plt.legend()
    plt.grid(True)
    plt.show()

    area_between = abs(quad(lambda x: curve(x) - line(x), a, b)[0])
    print(f"Area between the curve and the line: {area_between:.2f}")
