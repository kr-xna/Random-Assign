Description:
    Machine learning in business: Blackspot prediction and analysis.

README:
- Requires: pandas, numpy, seaborn, matplotlib, scikit-learn
- Run using: python mis710_ramkrishnamanirao_223067545.py
- Outputs: EDA, model training & evaluation, plots, metrics
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import (accuracy_score, classification_report, confusion_matrix,
                             precision_score, recall_score, f1_score, roc_curve, roc_auc_score)


# Load Data
data = pd.read_csv('Blackspot.csv', encoding='ISO-8859-1')

# Clean Data
data['AGE_65YRS_OVER_PCNT'].fillna(data['AGE_65YRS_OVER_PCNT'].median(), inplace=True)
data['Lq_Licenses'].fillna(data['Lq_Licenses'].mean(), inplace=True)
data['Intersection'] = (data['Intersection'] == 'Intersection').astype(int)
data['Blackspot'] = (data['Blackspot'] == 'Blackspot').astype(int)

# Standardize numeric features
numerical_cols = data.select_dtypes(include=['float64', 'int64']).columns
scaler = StandardScaler()
data[numerical_cols] = scaler.fit_transform(data[numerical_cols])

# Sample for EDA
sample = data.sample(n=2000, random_state=42)

# Plot target distribution
plt.figure(figsize=(6,4))
sns.countplot(x='Blackspot', data=sample)
plt.title('Blackspot Distribution')
plt.show()

# Feature selection
features = ['SEIFA', 'CARS_ZERO_HH_PCNT', 'Lq_Licenses', 'Supermarket']
X = sample[features]
y = sample['Blackspot']

# Train-Test Split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Model
model = LogisticRegression()
model.fit(X_train, y_train)
y_pred = model.predict(X_test)
y_proba = model.predict_proba(X_test)[:,1]

# Metrics
acc = accuracy_score(y_test, y_pred)
prec = precision_score(y_test, y_pred)
rec = recall_score(y_test, y_pred)
f1 = f1_score(y_test, y_pred)
roc_auc = roc_auc_score(y_test, y_proba)

print(f"Accuracy: {acc:.3f}")
print(f"Precision: {prec:.3f}")
print(f"Recall: {rec:.3f}")
print(f"F1-Score: {f1:.3f}")
print(f"ROC AUC: {roc_auc:.3f}")

# ROC Curve
fpr, tpr, _ = roc_curve(y_test, y_proba)
plt.plot(fpr, tpr, label=f'ROC AUC = {roc_auc:.2f}')
plt.plot([0,1], [0,1], 'k--')
plt.xlabel('False Positive Rate')
plt.ylabel('True Positive Rate')
plt.title('ROC Curve')
plt.legend()
plt.grid(True)
plt.show()

print("Model evaluation complete.")
